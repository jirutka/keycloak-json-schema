#!/usr/bin/env node
// @ts-check
// vim: set ts=2 sw=2 expandtab:

const FS = require('node:fs/promises')

const { default: RefParser, ParserError } = require('@apidevtools/json-schema-ref-parser')
const { default: $Ref } = require('@apidevtools/json-schema-ref-parser/dist/lib/ref')
const { openapiSchemaToJsonSchema: toJsonSchema } = require('@openapi-contrib/openapi-schema-to-json-schema')
const JsonMergePatch = require('json-merge-patch')
const { JsonPointer } = require('json-ptr')
const { getProperties } = require('properties-file')
const YAML = require('yaml')


const topLevelType = 'RealmRepresentation'

// HACK: Monkey-patch json-schema-ref-parser to dereference only external $ref.
{
  const _isAllowed$Ref = $Ref.isAllowed$Ref.bind($Ref)
  $Ref.isAllowed$Ref = (value, options) => {
    return _isAllowed$Ref(value, options) && value.$ref.startsWith('https://')
  }
}

const RefPropertiesParser = {
  order: 100,
  canParse: '.properties',

  async parse (file) {
    let data = file.data
    if (Buffer.isBuffer(data)) {
      data = data.toString()
    }

    if (typeof data === 'string') {
      if (data.trim().length === 0) {
        return // This mirrors the YAML behavior
      } else {
        try {
          return getProperties(data)
        } catch (err) {
          throw new ParserError(err.message, file.url)
        }
      }
    } else {
      // data is already a JavaScript value (object, array, number, null, NaN, etc.)
      return data
    }
  },
}

/** @type {(filepath: string, reviver?: (key: unknown, value: unknown) => unknown) => Promise<any>} */
async function parseFile (filepath, reviver) {
  const contents = await FS.readFile(filepath, 'utf-8')
  try {
    if (filepath.endsWith('.yml') || filepath.endsWith('.yaml')) {
      return YAML.parse(contents, { reviver })
    } else {
      return JSON.parse(contents, reviver)
    }
  } catch (err) {
    err.message = `${filepath}: ${err.message}`
    throw err
  }
}

/** @type {<T>(target: T, patchFile: string) => Promise<T>} */
async function applyMergePatch (target, patchFile) {
  let patch = await parseFile(patchFile, baseUriRefReviver())
  // Dereference external $ref(s).
  patch = await RefParser.dereference(patch, {
    parse: {
      properties: RefPropertiesParser,
    },
  })
  return JsonMergePatch.apply(target, patch)
}

/** @type {() => (key: unknown, value: unknown) => unknown} */
function baseUriRefReviver () {
  let baseUri

  return (key, value) => {
    if (key === '$baseUri' && typeof value === 'string') {
      baseUri = value
      return undefined

    } else if (key === '$ref' && typeof value === 'string') {
      if (!baseUri && value.includes('${baseUri}')) {
        throw new Error('$baseUri is not defined')
      }
      return value.replace('${baseUri}', baseUri)

    } else {
      return value
    }
  }
}

/** @type {<T>(obj: T, visitor: (value: any) => void) => T} */
function traverse (obj, visitor) {
  if (typeof obj === 'object' && obj != null) {
    for (const val of Object.values(obj)) {
      visitor(val)
      traverse(val, visitor)
    }
  }
  return obj
}

/** @type {(bundle: Record<string, any>, rootSchema: Record<string, any>) => Set<string>} */
function findReferencedSchemas (bundle, rootSchema) {
  const foundIds = new Set()

  const crawl = (schema) => traverse(schema, obj => {
    if (typeof obj !== 'object' || obj == null) {
      return
    }
    if (typeof obj.$ref === 'string' && obj.$ref.startsWith('#/$defs/')) {
      const { $ref } = obj
      const schemaId = $ref.replace('#/$defs/', '')

      if (!foundIds.has(schemaId)) {
        foundIds.add(schemaId)
        const refObj = JsonPointer.get(bundle, $ref)
        if (!refObj) {
          throw new Error(`Reference not found: ${$ref}`)
        }
        crawl(refObj)
      }
    }
  })
  crawl(rootSchema)

  return foundIds
}

/** @type {(argv: string[]) => Promise<void>} */
async function main (argv) {
  let onlyRealm = argv[0] === '--only-realm-export'
    ?  (argv.shift(), true)
    : false

  if (argv.length < 1 || ['-h', '--help'].includes(argv[0])) {
    console.warn('Usage: convert [--only-realm-export] <openapi> <merge-patch>...')
    process.exit(1)
  }

  const oApiSchema = await parseFile(argv[0])

  let schemaUri
  /** @type {Record<string, any>} */
  let defs = Object.entries(oApiSchema.components.schemas).reduce((acc, [id, schema]) => {
    const jsonSchema = toJsonSchema(schema)

    // It's the same for all, so just save the last one.
    schemaUri = jsonSchema['$schema']
    delete jsonSchema['$schema']

    acc[id] = jsonSchema
    return acc
  }, {})

  for (const patchFile of argv.slice(1)) {
    defs = await applyMergePatch(defs, patchFile)
  }

  const refIds = []
  traverse(defs, obj => {
    if (typeof obj !== 'object' || obj == null) {
      return
    }
    if ('$ref' in obj) {
      const ref = obj['$ref'].replace('#/components/schemas/', '#/$defs/')
      refIds.push(ref.replace(/^#\/.*\//, ''))
      obj['$ref'] = ref
    }
    if (obj.type === 'object' && 'properties' in obj) {
      obj.additionalProperties ??= false
    }
  })

  const missing = refIds.filter(id => !defs[id])
  if (missing.length > 0) {
    console.warn(`Missing references: ${missing.join(', ')}`)
    process.exit(1)
  }

  if (onlyRealm) {
    const schemaIds = findReferencedSchemas({ $defs: defs }, defs[topLevelType])

    defs = Object.keys(defs).reduce((acc, schemaId) => {
      if (schemaId === topLevelType || schemaIds.has(schemaId)) {
        acc[schemaId] = defs[schemaId]
      }
      return acc
    }, {})

    const bundle = {
      $schema: schemaUri,
      ...defs[topLevelType],
      $defs: defs,
    }
    delete bundle.$defs[topLevelType]

    console.log(JSON.stringify(bundle, null, 2))

  } else {
    const bundle = {
      $schema: schemaUri,
      $defs: defs,
    }
    console.log(JSON.stringify(bundle, null, 2))
  }
}

main(process.argv.slice(2)).catch(err => {
  throw err
})

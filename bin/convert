#!/usr/bin/env node
// @ts-check
// vim: set ts=2 sw=2 expandtab:

const FS = require('node:fs')

const { default: RefParser } = require('@apidevtools/json-schema-ref-parser')
const { default: $Ref } = require('@apidevtools/json-schema-ref-parser/dist/lib/ref')
const { openapiSchemaToJsonSchema: toJsonSchema } = require('@openapi-contrib/openapi-schema-to-json-schema')
const JsonMergePatch = require('json-merge-patch')
const YAML = require('yaml')


const topLevelType = 'RealmRepresentation'

// HACK: Monkey-patch json-schema-ref-parser to dereference only external $ref.
{
  const _isAllowed$Ref = $Ref.isAllowed$Ref.bind($Ref)
  $Ref.isAllowed$Ref = (value, options) => {
    return _isAllowed$Ref(value, options) && value.$ref.startsWith('https://')
  }
}

/** @type {(filepath: string, reviver?: (key: unknown, value: unknown) => unknown) => any} */
function parseFile (filepath, reviver) {
  const contents = FS.readFileSync(filepath, 'utf-8')
  try {
    if (filepath.endsWith('.yml') || filepath.endsWith('.yaml')) {
      return YAML.parse(contents, { reviver })
    } else {
      return JSON.parse(contents, reviver)
    }
  } catch (err) {
    err.message = `${filepath}: ${err.message}`
    throw err
  }
}

/** @type {<T>(target: T, patchFile: string) => Promise<T>} */
async function applyMergePatch (target, patchFile) {
  let patch = parseFile(patchFile, baseUriRefReviver())
  // Dereference external $ref(s).
  patch = await RefParser.dereference(patch)
  return JsonMergePatch.apply(target, patch)
}

/** @type {() => (key: unknown, value: unknown) => unknown} */
function baseUriRefReviver () {
  let baseUri

  return (key, value) => {
    if (key === '$baseUri' && typeof value === 'string') {
      baseUri = value
      return undefined

    } else if (key === '$ref' && typeof value === 'string') {
      if (!baseUri && value.includes('${baseUri}')) {
        throw new Error('$baseUri is not defined')
      }
      return value.replace('${baseUri}', baseUri)

    } else {
      return value
    }
  }
}

/** @type {<T>(obj: T, visitor: (value: any) => void) => T} */
function traverse (obj, visitor) {
  if (typeof obj === 'object' && obj != null) {
    for (const val of Object.values(obj)) {
      visitor(val)
      traverse(val, visitor)
    }
  }
  return obj
}

/** @type {(argv: string[]) => Promise<void>} */
async function main (argv) {
  if (argv.length < 1 || ['-h', '--help'].includes(argv[0])) {
    console.warn('Usage: convert <openapi> <merge-patch>...')
    process.exit(1)
  }

  const oApiSchema = parseFile(argv[0])

  let schemaUri
  /** @type {Record<string, any>} */
  let defs = Object.entries(oApiSchema.components.schemas).reduce((acc, [id, schema]) => {
    const jsonSchema = toJsonSchema(schema)

    // It's the same for all, so just save the last one.
    schemaUri = jsonSchema['$schema']
    delete jsonSchema['$schema']

    acc[id] = jsonSchema
    return acc
  }, {})

  // Fix unhandled inheritance.
  // https://github.com/dahag-ag/keycloak-openapi/issues/7
  Object.assign(
    defs.AuthenticationExecutionExportRepresentation.properties,
    defs.AbstractAuthenticationExecutionRepresentation.properties,
  )
  Object.assign(
    defs.PolicyRepresentation.properties,
    defs.AbstractPolicyRepresentation.properties,
  )

  for (const patchFile of argv.slice(1)) {
    defs = await applyMergePatch(defs, patchFile)
  }

  const refIds = []
  traverse(defs, obj => {
    if (typeof obj !== 'object' || obj == null) {
      return
    }
    if ('$ref' in obj) {
      const ref = obj['$ref'].replace('#/components/schemas/', '#/$defs/')
      refIds.push(ref.replace(/^#\/.*\//, ''))
      obj['$ref'] = ref
    }
    if (obj.type === 'object' && 'properties' in obj) {
      obj.additionalProperties ??= false
    }
    if (obj.type === 'string' && Array.isArray(obj['enum'])) {
      // https://github.com/dahag-ag/keycloak-openapi/issues/4 (it's not fixed in older specs)
      obj['enum'] = obj['enum'].map(item => item.replace(/\(\d\)$/, ''))
    }
  })

  const missing = refIds.filter(id => !defs[id])
  if (missing.length > 0) {
    console.warn(`Missing references: ${missing.join(', ')}`)
    process.exit(1)
  }

  const bundle = {
    '$schema': schemaUri,
    ...defs[topLevelType],
    '$defs': defs,
  }
  delete bundle['$defs'][topLevelType]

  console.log(JSON.stringify(bundle, null, 2))
}

main(process.argv.slice(2)).catch(err => {
  throw err
})

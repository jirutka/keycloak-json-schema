{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "$defs": {
    "AuthDetailsRepresentation": {
      "type": "object",
      "properties": {
        "realmId": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AuthenticationExecutionExportRepresentation": {
      "type": "object",
      "properties": {
        "userSetupAllowed": {
          "type": "boolean"
        },
        "flowAlias": {
          "type": "string"
        },
        "authenticatorConfig": {
          "type": "string"
        },
        "authenticator": {
          "type": "string"
        },
        "requirement": {
          "type": "string",
          "enum": [
            "ALTERNATIVE",
            "CONDITIONAL",
            "DISABLED",
            "REQUIRED"
          ]
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "autheticatorFlow": {
          "type": "boolean"
        },
        "authenticatorFlow": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "AuthenticationExecutionInfoRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "requirement": {
          "type": "string"
        },
        "requirementChoices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "configurable": {
          "type": "boolean"
        },
        "providerId": {
          "type": "string"
        },
        "authenticationConfig": {
          "type": "string"
        },
        "authenticationFlow": {
          "type": "boolean"
        },
        "level": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "flowId": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AuthenticationExecutionRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "flowId": {
          "type": "string"
        },
        "parentFlow": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AuthenticationFlowRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "topLevel": {
          "type": "boolean"
        },
        "builtIn": {
          "type": "boolean"
        },
        "authenticationExecutions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/AuthenticationExecutionExportRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "AuthenticatorConfigRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "CertificateRepresentation": {
      "type": "object",
      "properties": {
        "privateKey": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "certificate": {
          "type": "string"
        },
        "kid": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ClaimRepresentation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "boolean"
        },
        "username": {
          "type": "boolean"
        },
        "profile": {
          "type": "boolean"
        },
        "picture": {
          "type": "boolean"
        },
        "website": {
          "type": "boolean"
        },
        "email": {
          "type": "boolean"
        },
        "gender": {
          "type": "boolean"
        },
        "locale": {
          "type": "boolean"
        },
        "address": {
          "type": "boolean"
        },
        "phone": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "ClientInitialAccessCreatePresentation": {
      "type": "object",
      "properties": {
        "expiration": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        }
      },
      "additionalProperties": false
    },
    "ClientInitialAccessPresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "expiration": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "remainingCount": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        }
      },
      "additionalProperties": false
    },
    "ClientPoliciesRepresentation": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientPolicyRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "ClientPolicyConditionConfigurationRepresentation": {
      "type": "object",
      "properties": {
        "negativeLogic": {
          "type": "boolean"
        },
        "configAsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "additionalProperties": false
    },
    "ClientPolicyConditionRepresentation": {
      "type": "object",
      "properties": {
        "conditionProviderId": {
          "type": "string"
        },
        "configuration": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    "ClientPolicyExecutorConfigurationRepresentation": {
      "type": "object",
      "properties": {
        "configAsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "additionalProperties": false
    },
    "ClientPolicyExecutorRepresentation": {
      "type": "object",
      "properties": {
        "executorProviderId": {
          "type": "string"
        },
        "configuration": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    "ClientProfileRepresentation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "executors": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientPolicyExecutorRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "ClientProfilesRepresentation": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientProfileRepresentation"
          }
        },
        "globalProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientProfileRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "ComponentExportRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "subComponents": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/ComponentExportRepresentation"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "ComponentRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "type": "string"
        },
        "parentId": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "ConfigPropertyRepresentation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "defaultValue": {
          "type": "object"
        },
        "helpText": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secret": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "CredentialRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "userLabel": {
          "type": "string"
        },
        "secretData": {
          "type": "string"
        },
        "credentialData": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "createdDate": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "value": {
          "type": "string"
        },
        "temporary": {
          "type": "boolean"
        },
        "device": {
          "type": "string"
        },
        "hashedSaltedValue": {
          "type": "string"
        },
        "salt": {
          "type": "string"
        },
        "hashIterations": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "counter": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "algorithm": {
          "type": "string"
        },
        "digits": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "EventRepresentation": {
      "type": "object",
      "properties": {
        "time": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "type": {
          "type": "string"
        },
        "realmId": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "FederatedIdentityRepresentation": {
      "type": "object",
      "properties": {
        "identityProvider": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "GroupRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "realmRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientRoles": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "subGroups": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/GroupRepresentation"
          }
        },
        "access": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      },
      "additionalProperties": false
    },
    "IdentityProviderMapperRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Name of the mapper."
        },
        "identityProviderAlias": {
          "type": "string"
        },
        "identityProviderMapper": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "properties": {
            "attribute.friendly.name": {
              "type": "string",
              "title": "Friendly name",
              "description": "Friendly name of attribute to search for in assertion. You can leave this blank and specify a name instead."
            },
            "attribute.name.format": {
              "type": "string",
              "enum": [
                "ATTRIBUTE_FORMAT_BASIC",
                "ATTRIBUTE_FORMAT_URI",
                "ATTRIBUTE_FORMAT_UNSPECIFIED"
              ]
            },
            "syncMode": {
              "type": "string",
              "enum": [
                "INHERIT",
                "IMPORT",
                "LEGACY",
                "FORCE"
              ],
              "title": "Sync mode override",
              "description": "Overrides the default sync mode of the IDP for this mapper. Values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once during first login of the user with this identity provider, 'force' to always update the user during every login with this identity provider and 'inherit' to use the sync mode defined in the identity provider for this mapper."
            },
            "user.attribute": {
              "type": "string",
              "title": "User Attribute Name",
              "description": "User attribute name to store SAML attribute. Use email, lastName, and firstName to map to those predefined user properties."
            }
          }
        }
      },
      "additionalProperties": false
    },
    "IdentityProviderMapperTypeRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "helpText": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConfigPropertyRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "IdentityProviderRepresentation": {
      "type": "object",
      "properties": {
        "internalId": {
          "type": "string"
        },
        "alias": {
          "type": "string",
          "title": "Alias",
          "description": "The alias uniquely identifies an identity provider and it is also used to build the redirect uri."
        },
        "providerId": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "properties": {
            "entityId": {
              "type": "string",
              "title": "Service provider entity ID",
              "description": "The Entity ID that will be used to uniquely identify this SAML Service Provider."
            },
            "idpEntityId": {
              "type": "string",
              "title": "Identity provider entity ID",
              "description": "The Entity ID used to validate the Issuer for received SAML assertions. If empty, no Issuer validation is performed."
            },
            "singleSignOnServiceUrl": {
              "type": "string",
              "title": "Single Sign-On service URL",
              "description": "The Url that must be used to send authentication requests (SAML AuthnRequest)."
            },
            "backchannelSupported": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Backchannel logout",
              "description": "Does the external IDP support backchannel logout?"
            },
            "nameIDPolicyFormat": {
              "type": "string",
              "title": "NameID policy format",
              "description": "Specifies the URI reference corresponding to a name identifier format."
            },
            "principalType": {
              "type": "string",
              "enum": [
                "Subject NameID",
                "ATTRIBUTE",
                "FRIENDLY_ATTRIBUTE"
              ],
              "title": "Principal type",
              "description": "Way to identify and track external users from the assertion. Default is using Subject NameID, alternatively you can set up identifying attribute."
            },
            "principalAttribute": {
              "type": "string",
              "title": "Principal attribute",
              "description": "Name or Friendly Name of the attribute used to identify external users."
            },
            "allowCreate": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Allow create",
              "description": "Allow the external identity provider to create a new identifier to represent the principal."
            },
            "postBindingResponse": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "HTTP-POST binding response",
              "description": "Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used."
            },
            "postBindingAuthnRequest": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "HTTP-POST binding for AuthnRequest",
              "description": "Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used."
            },
            "postBindingLogout": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "HTTP-POST binding logout",
              "description": "Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used."
            },
            "wantAuthnRequestsSigned": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Want AuthnRequests signed",
              "description": "Indicates whether the identity provider expects a signed AuthnRequest."
            },
            "signatureAlgorithm": {
              "type": "string",
              "title": "Signature algorithm",
              "description": "The signature algorithm to use to sign documents. Note that 'SHA1' based algorithms are deprecated and can be removed in the future. It is recommended to stick to some more secure algorithm instead of '*_SHA1'"
            },
            "encryptionAlgorithm": {
              "type": "string",
              "title": "Encryption Algorithm",
              "description": "Encryption algorithm, which is used by SAML IDP for encryption of SAML documents, assertions or IDs. The corresponding decryption key for decrypt SAML document parts will be chosen based on this configured algorithm and should be available in realm keys for the encryption (ENC) usage. If algorithm is not configured, then any supported algorithm is allowed and decryption key will be chosen based on the algorithm configured in SAML document itself."
            },
            "xmlSigKeyInfoKeyNameTransformer": {
              "type": "string",
              "enum": [
                "NONE",
                "KEY_ID",
                "CERT_SUBJECT"
              ],
              "title": "SAML signature key name",
              "description": "Signed SAML documents contain identification of signing key in KeyName element. For Keycloak / RH-SSO counter-party, use KEY_ID, for MS AD FS use CERT_SUBJECT, for others check and use NONE if no other option works."
            },
            "wantAssertionsSigned": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Want Assertions signed",
              "description": "Indicates whether this service provider expects a signed Assertion."
            },
            "wantAssertionsEncrypted": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Want Assertions encrypted",
              "description": "Indicates whether this service provider expects an encrypted Assertion."
            },
            "forceAuthn": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Force authentication",
              "description": "Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context."
            },
            "validateSignature": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Validate Signatures",
              "description": "Enable/disable signature validation of external IDP signatures."
            },
            "signingCertificate": {
              "type": "string",
              "title": "Validating X509 certificates",
              "description": "The certificate in PEM format that must be used to check for signatures. Multiple certificates can be entered, separated by comma (,)."
            },
            "signSpMetadata": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Sign service provider metadata",
              "description": "Enable/disable signature of the provider SAML metadata."
            },
            "loginHint": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Pass subject",
              "description": "During login phase, forward an optional login_hint query parameter to SAML AuthnRequest's Subject."
            },
            "allowedClockSkew": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Allowed clock skew",
              "description": "Clock skew in seconds that is tolerated when validating identity provider tokens. Default value is zero."
            },
            "attributeConsumingServiceIndex": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Attribute Consuming Service Index",
              "description": "Index of the Attribute Consuming Service profile to request during authentication."
            },
            "authnContextComparisonType": {
              "type": "string",
              "enum": [
                "exact",
                "minimum",
                "maximum",
                "better"
              ],
              "title": "Comparison",
              "description": "Specifies the comparison method used to evaluate the requested context classes or statements. The default is \"Exact\"."
            },
            "authnContextClassRefs": {
              "type": "string",
              "title": "AuthnContext ClassRefs",
              "description": "Ordered list of requested AuthnContext ClassRefs."
            },
            "authnContextDeclRefs": {
              "type": "string",
              "title": "AuthnContext DeclRefs",
              "description": "Ordered list of requested AuthnContext DeclRefs."
            },
            "hideOnLoginPage": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Hide on login page",
              "description": "If hidden, login with this provider is possible only if requested explicitly, for example using the 'kc_idp_hint' parameter."
            },
            "syncMode": {
              "type": "string",
              "enum": [
                "IMPORT",
                "LEGACY",
                "FORCE"
              ],
              "title": "Sync mode",
              "description": "Default sync mode for all mappers. The sync mode determines when user data will be synced using the mappers. Possible values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once during first login of the user with this identity provider, 'force' to always update the user during every login with this identity provider."
            }
          }
        },
        "enabled": {
          "type": "boolean",
          "title": "Enabled"
        },
        "linkOnly": {
          "type": "boolean",
          "title": "Account linking only",
          "description": "If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider"
        },
        "updateProfileFirstLoginMode": {
          "type": "string"
        },
        "authenticateByDefault": {
          "type": "boolean"
        },
        "firstBrokerLoginFlowAlias": {
          "type": "string",
          "title": "First login flow",
          "description": "Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that no Keycloak account is currently linked to the authenticated identity provider account."
        },
        "postBrokerLoginFlowAlias": {
          "type": "string",
          "title": "Post login flow",
          "description": "Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this to \"None\" if you need no any additional authenticators to be triggered after login with this identity provider. Also note that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it."
        },
        "storeToken": {
          "type": "boolean",
          "title": "Store tokens",
          "description": "Enable/disable if tokens must be stored after authenticating users."
        },
        "addReadTokenRoleOnCreate": {
          "type": "boolean",
          "title": "Stored tokens readable",
          "description": "Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role."
        },
        "trustEmail": {
          "type": "boolean",
          "title": "Trust Email",
          "description": "If enabled, email provided by this provider is not verified even if verification is enabled for the realm."
        },
        "displayName": {
          "type": "string",
          "title": "Display name",
          "description": "Friendly name for Identity Providers."
        }
      },
      "additionalProperties": false
    },
    "KeyMetadataRepresentation": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerPriority": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "kid": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "algorithm": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "certificate": {
          "type": "string"
        },
        "use": {
          "type": "object",
          "description": "KeyUse"
        }
      },
      "additionalProperties": false
    },
    "LDAPCapabilityRepresentation": {
      "type": "object",
      "properties": {
        "oid": {
          "type": "string"
        },
        "type": {
          "type": "object",
          "description": "CapabilityType"
        }
      },
      "additionalProperties": false
    },
    "ManagementPermissionReference": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "resource": {
          "type": "string"
        },
        "scopePermissions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ManagementPermissionRepresentation": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "OAuth2ErrorRepresentation": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "errorDescription": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "OAuthClientRepresentation": {
      "type": "object"
    },
    "PasswordPolicyTypeRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "configType": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        },
        "multipleSupported": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "ProtocolMapperRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "openid-connect",
            "saml"
          ]
        },
        "protocolMapper": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "consentRequired": {
          "type": "boolean"
        },
        "consentText": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ProtocolMapperTypeRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "helpText": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConfigPropertyRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "PublishedRealmRepresentation": {
      "type": "object",
      "properties": {
        "publicKeyPem": {
          "type": "string"
        },
        "tokenServiceUrl": {
          "type": "string"
        },
        "accountServiceUrl": {
          "type": "string"
        },
        "notBefore": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        }
      },
      "additionalProperties": false
    },
    "RealmEventsConfigRepresentation": {
      "type": "object",
      "properties": {
        "eventsEnabled": {
          "type": "boolean"
        },
        "eventsExpiration": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "eventsListeners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enabledEventTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "adminEventsEnabled": {
          "type": "boolean"
        },
        "adminEventsDetailsEnabled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "RequiredActionProviderRepresentation": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "defaultAction": {
          "type": "boolean"
        },
        "providerId": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "RequiredActionProviderSimpleRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Composites": {
      "type": "object",
      "properties": {
        "realm": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "client": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "application": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "ScopeMappingRepresentation": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "client": {
          "type": "string"
        },
        "clientTemplate": {
          "type": "string"
        },
        "clientScope": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "SocialLinkRepresentation": {
      "type": "object",
      "properties": {
        "socialProvider": {
          "type": "string"
        },
        "socialUserId": {
          "type": "string"
        },
        "socialUsername": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SynchronizationResultRepresentation": {
      "type": "object",
      "properties": {
        "ignored": {
          "type": "boolean"
        },
        "added": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "updated": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "removed": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "failed": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "status": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "TestLdapConnectionRepresentation": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "connectionUrl": {
          "type": "string"
        },
        "authType": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "bindCredential": {
          "type": "string"
        },
        "useTruststoreSpi": {
          "type": "string"
        },
        "connectionTimeout": {
          "type": "string"
        },
        "componentId": {
          "type": "string"
        },
        "startTls": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "UserConsentRepresentation": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "grantedClientScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdDate": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "lastUpdatedDate": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "grantedRealmRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "UserFederationMapperRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "federationProviderDisplayName": {
          "type": "string"
        },
        "federationMapperType": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "UserFederationMapperSyncConfigRepresentation": {
      "type": "object",
      "properties": {
        "fedToKeycloakSyncSupported": {
          "type": "boolean"
        },
        "fedToKeycloakSyncMessage": {
          "type": "string"
        },
        "keycloakToFedSyncSupported": {
          "type": "boolean"
        },
        "keycloakToFedSyncMessage": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "UserFederationMapperTypeRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "helpText": {
          "type": "string"
        },
        "syncConfig": {
          "$ref": "#/$defs/UserFederationMapperSyncConfigRepresentation"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConfigPropertyRepresentation"
          }
        },
        "defaultConfig": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "UserFederationProviderFactoryRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "helpText": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConfigPropertyRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "UserFederationProviderRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "fullSyncPeriod": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "changedSyncPeriod": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "lastSync": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        }
      },
      "additionalProperties": false
    },
    "UserRepresentation": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "totp": {
          "type": "boolean"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "credentials": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/CredentialRepresentation"
          }
        },
        "requiredActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "federatedIdentities": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/FederatedIdentityRepresentation"
          }
        },
        "socialLinks": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SocialLinkRepresentation"
          }
        },
        "realmRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientRoles": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "clientConsents": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/UserConsentRepresentation"
          }
        },
        "notBefore": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "applicationRoles": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "federationLink": {
          "type": "string"
        },
        "serviceAccountClientId": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "origin": {
          "type": "string"
        },
        "disableableCredentialTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "access": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      },
      "additionalProperties": false
    },
    "UserSessionRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "start": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "lastAccess": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "rememberMe": {
          "type": "boolean"
        },
        "clients": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Access": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verifyCaller": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "CertConf": {
      "type": "object",
      "properties": {
        "certThumbprint": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AccessTokenResponse": {
      "type": "object",
      "properties": {
        "scope": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "refreshExpiresIn": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "refreshToken": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "notBeforePolicy": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "sessionState": {
          "type": "string"
        },
        "otherClaims": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "error": {
          "type": "string"
        },
        "errorDescription": {
          "type": "string"
        },
        "errorUri": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AddressClaimSet": {
      "type": "object",
      "properties": {
        "formattedAddress": {
          "type": "string"
        },
        "streetAddress": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AuthorizationDetailsJSONRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "datatypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifier": {
          "type": "string"
        },
        "privileges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "scopeNameFromCustomData": {
          "type": "string"
        },
        "dynamicScopeParamFromCustomData": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AuthorizationResponseToken": {
      "type": "object",
      "properties": {
        "category": {
          "enum": [
            "INTERNAL",
            "ACCESS",
            "ID",
            "ADMIN",
            "USERINFO",
            "LOGOUT",
            "AUTHORIZATION_RESPONSE"
          ],
          "type": "string",
          "description": "TokenCategory"
        }
      },
      "additionalProperties": false
    },
    "ClaimsRepresentation": {
      "type": "object",
      "properties": {
        "idTokenClaims": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "ClaimValue"
          }
        },
        "userinfoClaims": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "ClaimValue"
          }
        },
        "present": {
          "type": "boolean"
        },
        "presentAsNullClaim": {
          "type": "boolean"
        },
        "claimValue": {
          "type": "object",
          "description": "ClaimValue<CLAIM_TYPE>"
        }
      },
      "additionalProperties": false
    },
    "IDToken": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string"
        },
        "auth_time": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "sessionId": {
          "type": "string"
        },
        "sessionState": {
          "type": "string"
        },
        "accessTokenHash": {
          "type": "string"
        },
        "codeHash": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "givenName": {
          "type": "string"
        },
        "familyName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "preferredUsername": {
          "type": "string"
        },
        "profile": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "gender": {
          "type": "string"
        },
        "birthdate": {
          "type": "string"
        },
        "zoneinfo": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneNumberVerified": {
          "type": "boolean"
        },
        "address": {
          "$ref": "#/$defs/AddressClaimSet"
        },
        "updatedAt": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "claimsLocales": {
          "type": "string"
        },
        "acr": {
          "type": "string"
        },
        "stateHash": {
          "type": "string"
        },
        "category": {
          "enum": [
            "INTERNAL",
            "ACCESS",
            "ID",
            "ADMIN",
            "USERINFO",
            "LOGOUT",
            "AUTHORIZATION_RESPONSE"
          ],
          "type": "string",
          "description": "TokenCategory"
        }
      },
      "additionalProperties": false
    },
    "JsonWebToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "exp": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "nbf": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "iat": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "issuer": {
          "type": "string"
        },
        "suer": {
          "$ref": "#/$defs/JsonWebToken"
        },
        "subject": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "issuedFor": {
          "type": "string"
        },
        "suedFor": {
          "$ref": "#/$defs/JsonWebToken"
        },
        "otherClaims": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "category": {
          "enum": [
            "INTERNAL",
            "ACCESS",
            "ID",
            "ADMIN",
            "USERINFO",
            "LOGOUT",
            "AUTHORIZATION_RESPONSE"
          ],
          "type": "string",
          "description": "TokenCategory"
        }
      },
      "additionalProperties": false
    },
    "KeyStoreConfig": {
      "type": "object",
      "properties": {
        "realmCertificate": {
          "type": "boolean"
        },
        "storePassword": {
          "type": "string"
        },
        "keyPassword": {
          "type": "string"
        },
        "keyAlias": {
          "type": "string"
        },
        "realmAlias": {
          "type": "string"
        },
        "format": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LogoutToken": {
      "type": "object",
      "properties": {
        "events": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "sid": {
          "type": "string"
        },
        "category": {
          "enum": [
            "INTERNAL",
            "ACCESS",
            "ID",
            "ADMIN",
            "USERINFO",
            "LOGOUT",
            "AUTHORIZATION_RESPONSE"
          ],
          "type": "string",
          "description": "TokenCategory"
        }
      },
      "additionalProperties": false
    },
    "OAuth2DeviceAuthorizationResponse": {
      "type": "object",
      "properties": {
        "deviceCode": {
          "type": "string"
        },
        "userCode": {
          "type": "string"
        },
        "verificationUri": {
          "type": "string"
        },
        "verificationUriComplete": {
          "type": "string"
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "interval": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        }
      },
      "additionalProperties": false
    },
    "RefreshToken": {
      "type": "object",
      "properties": {
        "category": {
          "enum": [
            "INTERNAL",
            "ACCESS",
            "ID",
            "ADMIN",
            "USERINFO",
            "LOGOUT",
            "AUTHORIZATION_RESPONSE"
          ],
          "type": "string",
          "description": "TokenCategory"
        }
      },
      "additionalProperties": false
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "givenName": {
          "type": "string"
        },
        "familyName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "preferredUsername": {
          "type": "string"
        },
        "profile": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "gender": {
          "type": "string"
        },
        "birthdate": {
          "type": "string"
        },
        "zoneinfo": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneNumberVerified": {
          "type": "boolean"
        },
        "address": {
          "$ref": "#/$defs/AddressClaimSet"
        },
        "updatedAt": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "sub": {
          "type": "string"
        },
        "claimsLocales": {
          "type": "string"
        },
        "otherClaims": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "additionalProperties": false
    },
    "VersionRepresentation": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "buildTime": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SynchronizationResult": {
      "type": "object",
      "properties": {
        "ignored": {
          "type": "boolean"
        },
        "added": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "updated": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "removed": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "failed": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "status": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ProtocolMapperEvaluationRepresentation": {
      "type": "object",
      "properties": {
        "mapperId": {
          "type": "string"
        },
        "mapperName": {
          "type": "string"
        },
        "containerId": {
          "type": "string"
        },
        "containerName": {
          "type": "string"
        },
        "containerType": {
          "type": "string"
        },
        "protocolMapper": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Permission": {
      "type": "object",
      "properties": {
        "resourceId": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "claims": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "AggregatePolicyRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ClientScopeDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "GroupDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "extendChildren": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "JSPolicyRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PermissionTicketRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "granted": {
          "type": "boolean"
        },
        "scopeName": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "requesterName": {
          "type": "string"
        },
        "requester": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PolicyProviderRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "group": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PolicyRepresentation": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "decisionStrategy": {
          "enum": [
            "AFFIRMATIVE",
            "UNANIMOUS",
            "CONSENSUS"
          ],
          "type": "string",
          "description": "DecisionStrategy"
        },
        "logic": {
          "enum": [
            "POSITIVE",
            "NEGATIVE"
          ],
          "type": "string",
          "description": "Logic"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "type": "string"
        },
        "resourcesData": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ResourceRepresentation"
          }
        },
        "scopesData": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopeRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "RegexPolicyRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "targetClaim": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ResourceOwnerRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ResourcePermissionRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RoleDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "ScopePermissionRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "TimePolicyRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "notBefore": {
          "type": "string"
        },
        "notOnOrAfter": {
          "type": "string"
        },
        "dayMonth": {
          "type": "string"
        },
        "dayMonthEnd": {
          "type": "string"
        },
        "month": {
          "type": "string"
        },
        "monthEnd": {
          "type": "string"
        },
        "year": {
          "type": "string"
        },
        "yearEnd": {
          "type": "string"
        },
        "hour": {
          "type": "string"
        },
        "hourEnd": {
          "type": "string"
        },
        "minute": {
          "type": "string"
        },
        "minuteEnd": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "UmaPermissionRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "UserPolicyRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "AdminEventRepresentation": {
      "type": "object",
      "properties": {
        "time": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "realmId": {
          "type": "string"
        },
        "authDetails": {
          "$ref": "#/$defs/AuthDetailsRepresentation"
        },
        "operationType": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "resourcePath": {
          "type": "string"
        },
        "representation": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ApplicationRepresentation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "claims": {
          "$ref": "#/$defs/ClaimRepresentation"
        }
      },
      "additionalProperties": false
    },
    "AuthenticatorConfigInfoRepresentation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "helpText": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConfigPropertyRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "ClientScopeRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "protocolMappers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ProtocolMapperRepresentation"
          }
        },
        "protocol": {
          "type": "string",
          "enum": [
            "openid-connect",
            "saml"
          ]
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ClientTemplateRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "protocolMappers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ProtocolMapperRepresentation"
          }
        },
        "protocol": {
          "type": "string"
        },
        "fullScopeAllowed": {
          "type": "boolean"
        },
        "bearerOnly": {
          "type": "boolean"
        },
        "consentRequired": {
          "type": "boolean"
        },
        "standardFlowEnabled": {
          "type": "boolean"
        },
        "implicitFlowEnabled": {
          "type": "boolean"
        },
        "directAccessGrantsEnabled": {
          "type": "boolean"
        },
        "serviceAccountsEnabled": {
          "type": "boolean"
        },
        "publicClient": {
          "type": "boolean"
        },
        "frontchannelLogout": {
          "type": "boolean"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ComponentTypeRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "helpText": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ConfigPropertyRepresentation"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "additionalProperties": false
    },
    "KeysMetadataRepresentation": {
      "type": "object",
      "properties": {
        "active": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/KeyMetadataRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "RoleRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "scopeParamRequired": {
          "type": "boolean"
        },
        "composites": {
          "$ref": "#/$defs/Composites"
        },
        "composite": {
          "type": "boolean"
        },
        "clientRole": {
          "type": "boolean"
        },
        "containerId": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "RolesRepresentation": {
      "type": "object",
      "properties": {
        "realm": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/RoleRepresentation"
          }
        },
        "client": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/RoleRepresentation"
            }
          }
        },
        "application": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/RoleRepresentation"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "Authorization": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Permission"
          }
        }
      },
      "additionalProperties": false
    },
    "ClientScopePolicyRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "clientScopes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientScopeDefinition"
          }
        }
      },
      "additionalProperties": false
    },
    "GroupPolicyRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "groupsClaim": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/GroupDefinition"
          }
        }
      },
      "additionalProperties": false
    },
    "RolePolicyRepresentation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/RoleDefinition"
          }
        }
      },
      "additionalProperties": false
    },
    "ClientMappingsRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "client": {
          "type": "string"
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/RoleRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "MappingsRepresentation": {
      "type": "object",
      "properties": {
        "realmMappings": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/RoleRepresentation"
          }
        },
        "clientMappings": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/ClientMappingsRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "AccessToken": {
      "type": "object",
      "properties": {
        "suedAt": {
          "$ref": "#/$defs/AccessToken"
        },
        "suer": {
          "$ref": "#/$defs/AccessToken"
        },
        "allowedOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "realmAccess": {
          "$ref": "#/$defs/Access"
        },
        "trustedCertificates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suedFor": {
          "$ref": "#/$defs/AccessToken"
        },
        "authorization": {
          "$ref": "#/$defs/Authorization"
        },
        "certConf": {
          "$ref": "#/$defs/CertConf"
        },
        "scope": {
          "type": "string"
        },
        "category": {
          "enum": [
            "INTERNAL",
            "ACCESS",
            "ID",
            "ADMIN",
            "USERINFO",
            "LOGOUT",
            "AUTHORIZATION_RESPONSE"
          ],
          "type": "string",
          "description": "TokenCategory"
        }
      },
      "additionalProperties": false
    },
    "ClientRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Specifies display name of the client. For example 'My Client'. Supports keys for localized values as well. For example: ${my_client}"
        },
        "description": {
          "type": "string",
          "title": "Description",
          "description": "Specifies description of the client. For example 'My Client for TimeSheets'. Supports keys for localized values as well. For example: ${my_client_description}"
        },
        "clientId": {
          "type": "string",
          "title": "Client ID",
          "description": "Specifies ID referenced in URI and tokens. For example 'my-client'. For SAML this is also the expected issuer value from authn requests"
        },
        "enabled": {
          "type": "boolean",
          "title": "Enabled",
          "description": "Disabled clients cannot initiate a login or have obtained access tokens."
        },
        "alwaysDisplayInConsole": {
          "type": "boolean",
          "title": "Always display in UI",
          "description": "Always list this client in the Account UI, even if the user does not have an active session."
        },
        "surrogateAuthRequired": {
          "type": "boolean"
        },
        "rootUrl": {
          "type": "string",
          "title": "Root URL",
          "description": "Root URL appended to relative URLs"
        },
        "adminUrl": {
          "type": "string",
          "title": "Admin URL",
          "description": "URL to the admin interface of the client. Set this if the client supports the adapter REST API. This REST API allows the auth server to push revocation policies and other administrative tasks. Usually this is set to the base URL of the client."
        },
        "baseUrl": {
          "type": "string",
          "title": "Home URL",
          "description": "Default URL to use when the auth server needs to redirect or link back to the client."
        },
        "clientAuthenticatorType": {
          "type": "string",
          "enum": [
            "client-jwt",
            "client-secret",
            "client-secret-jwt",
            "client-x509"
          ],
          "title": "Client Authenticator",
          "description": "Client Authenticator used for authentication of this client against Keycloak server"
        },
        "secret": {
          "type": "string",
          "title": "Client secret"
        },
        "registrationAccessToken": {
          "type": "string",
          "title": "Registration access token",
          "description": "The registration access token provides access for clients to the client registration service."
        },
        "redirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Valid redirect URIs",
          "description": "Valid URI pattern a browser can redirect to after a successful login. Simple wildcards are allowed such as 'http://example.com/*'. Relative path can be specified too such as /my/relative/path/*. Relative paths are relative to the client root URL, or if none is specified the auth server root URL is used. For SAML, you must set valid URI patterns if you are relying on the consumer service URL embedded with the login request."
        },
        "webOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Web origins",
          "description": "Allowed CORS origins. To permit all origins of Valid Redirect URIs, add '+'. This does not include the '*' wildcard though. To permit all origins, explicitly add '*'."
        },
        "defaultRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notBefore": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Not before",
          "description": "Revoke any tokens issued before this time for this client. To push the policy, you should set an effective admin URL in the Settings tab first."
        },
        "bearerOnly": {
          "type": "boolean",
          "description": "This is a special OIDC type. This client only allows bearer token requests and cannot participate in browser logins."
        },
        "consentRequired": {
          "type": "boolean",
          "title": "Consent required",
          "description": "If enabled, users have to consent to client access."
        },
        "standardFlowEnabled": {
          "type": "boolean",
          "title": "Standard flow",
          "description": "This enables standard OpenID Connect redirect based authentication with authorization code. In terms of OpenID Connect or OAuth2 specifications, this enables support of 'Authorization Code Flow' for this client."
        },
        "implicitFlowEnabled": {
          "type": "boolean",
          "title": "Implicit flow",
          "description": "This enables support for OpenID Connect redirect based authentication without authorization code. In terms of OpenID Connect or OAuth2 specifications, this enables support of 'Implicit Flow' for this client."
        },
        "directAccessGrantsEnabled": {
          "type": "boolean",
          "title": "Direct access grants",
          "description": "This enables support for Direct Access Grants, which means that client has access to username/password of user and exchange it directly with Keycloak server for access token. In terms of OAuth2 specification, this enables support of 'Resource Owner Password Credentials Grant' for this client."
        },
        "serviceAccountsEnabled": {
          "type": "boolean",
          "title": "Service accounts roles",
          "description": "Allows you to authenticate this client to Keycloak and retrieve access token dedicated to this client. In terms of OAuth2 specification, this enables support of 'Client Credentials Grant' for this client."
        },
        "authorizationServicesEnabled": {
          "type": "boolean",
          "title": "Authorization",
          "description": "Enable/Disable fine-grained authorization support for a client"
        },
        "directGrantsOnly": {
          "type": "boolean"
        },
        "publicClient": {
          "type": "boolean",
          "title": "Client authentication",
          "description": "This defines the type of the OIDC client. When it's ON, the OIDC type is set to confidential access type. When it's OFF, it is set to public access type"
        },
        "fullScopeAllowed": {
          "type": "boolean",
          "title": "Full scope allowed",
          "description": "Allows you to disable all restrictions."
        },
        "protocol": {
          "type": "string",
          "title": "Protocol"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "properties": {
            "post.logout.redirect.uris": {
              "type": "string",
              "title": "Valid post logout redirect URIs",
              "description": "Valid URI pattern a browser can redirect to after a successful login. Simple wildcards are allowed such as 'http://example.com/*'. Relative path can be specified too such as /my/relative/path/*. Relative paths are relative to the client root URL, or if none is specified the auth server root URL is used. For SAML, you must set valid URI patterns if you are relying on the consumer service URL embedded with the login request."
            },
            "token.endpoint.auth.signing.alg": {
              "type": "string",
              "title": "Signature algorithm",
              "description": "JWA algorithm, which the client needs to use when signing a JWT for authentication. If left blank, the client is allowed to use any appropriate algorithm for the particular client authenticator."
            },
            "x509.allow.regex.pattern.comparison": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Allow regex pattern comparison",
              "description": "If OFF, then the Subject DN from given client certificate must exactly match the given DN from the 'Subject DN' property as described in the RFC8705 specification. The Subject DN can be in the RFC2553 or RFC1779 format. If ON, then the Subject DN from given client certificate should match regex specified by 'Subject DN' property."
            },
            "x509.subjectdn": {
              "type": "string",
              "title": "Subject DN",
              "description": "A regular expression for validating Subject DN in the Client Certificate. Use \"(.*?)(?:$)\" to match all kind of expressions."
            },
            "logoUri": {
              "type": "string",
              "title": "Logo URL",
              "description": "URL that references a logo for the Client application"
            },
            "policyUri": {
              "type": "string",
              "title": "Policy URL",
              "description": "URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used"
            },
            "tosUri": {
              "type": "string",
              "title": "Terms of service URL",
              "description": "URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service"
            },
            "access.token.signed.response.alg": {
              "type": "string",
              "title": "Access token signature algorithm",
              "description": "JWA algorithm used for signing access tokens."
            },
            "id.token.signed.response.alg": {
              "type": "string",
              "title": "ID token signature algorithm",
              "description": "JWA algorithm used for signing ID tokens."
            },
            "id.token.encrypted.response.alg": {
              "type": "string",
              "title": "ID token encryption key management algorithm",
              "description": "JWA Algorithm used for key management in encrypting ID tokens. This option is needed if you want encrypted ID tokens. If left empty, ID Tokens are just signed, but not encrypted."
            },
            "id.token.encrypted.response.enc": {
              "type": "string",
              "title": "ID token encryption content encryption algorithm",
              "description": "JWA Algorithm used for content encryption in encrypting ID tokens. This option is needed just if you want encrypted ID tokens. If left empty, ID Tokens are just signed, but not encrypted."
            },
            "user.info.response.signature.alg": {
              "type": "string",
              "title": "User info signed response algorithm",
              "description": "JWA algorithm used for signed User Info Endpoint response. If set to 'unsigned', User Info Response won't be signed and will be returned in application/json format."
            },
            "user.info.encrypted.response.alg": {
              "type": "string",
              "title": "User info response encryption key management algorithm",
              "description": "JWA Algorithm used for key management in encrypting User Info Endpoint responses. This option is needed if you want encrypted User Info Endpoint responses. If left empty, User Info Endpoint responses are not encrypted."
            },
            "user.info.encrypted.response.enc": {
              "type": "string",
              "title": "User info response encryption content encryption algorithm",
              "description": "JWA Algorithm used for content encryption in encrypting User Info Endpoint responses. If User Info response encryption key management algorithm is specified, the default for this value is A128CBC-HS256."
            },
            "request.object.signature.alg": {
              "type": "string",
              "title": "Request object signature algorithm",
              "description": "JWA algorithm, which client needs to use when sending OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', Request object can be signed by any algorithm (including 'none' )."
            },
            "request.object.encryption.alg": {
              "type": "string",
              "title": "Request object encryption algorithm",
              "description": "JWE algorithm, which client needs to use when sending OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', encryption is optional and any algorithm is allowed."
            },
            "request.object.encryption.enc": {
              "type": "string",
              "title": "Request object content encryption algorithm",
              "description": "JWE algorithm, which client needs to use when encrypting the content of the OIDC request object specified by 'request' or 'request_uri' parameters. If set to 'any', any algorithm is allowed."
            },
            "request.object.required": {
              "type": "string",
              "title": "Request object required",
              "description": "Specifies if the client needs to provide a request object with their authorization requests, and what method they can use for this. If set to \"not required\", providing a request object is optional. In all other cases, providing a request object is mandatory. If set to \"request\", the request object must be provided by value. If set to \"request_uri\", the request object must be provided by reference. If set to \"request or request_uri\", either method can be used."
            },
            "authorization.signed.response.alg": {
              "type": "string",
              "title": "Authorization response signature algorithm",
              "description": "JWA algorithm used for signing authorization response tokens when the response mode is jwt."
            },
            "authorization.encrypted.response.alg": {
              "type": "string",
              "title": "Authorization response encryption key management algorithm",
              "description": "JWA Algorithm used for key management in encrypting the authorization response when the response mode is jwt. This option is needed if you want encrypted authorization response. If left empty, the authorization response is just signed, but not encrypted."
            },
            "authorization.encrypted.response.enc": {
              "type": "string",
              "title": "Authorization response encryption content encryption algorithm",
              "description": "JWA Algorithm used for content encryption in encrypting the authorization response when the response mode is jwt. This option is needed if you want encrypted authorization response. If left empty, the authorization response is just signed, but not encrypted."
            },
            "exclude.session.state.from.auth.response": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Exclude Session State From Authentication Response",
              "description": "If this is on, the parameter 'session_state' will not be included in OpenID Connect Authentication Response. It is useful if your client uses older OIDC / OAuth2 adapter, which does not support 'session_state' parameter."
            },
            "use.refresh.tokens": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Use refresh tokens",
              "description": "If this is on, a refresh_token will be created and added to the token response. If this is off then no refresh_token will be generated."
            },
            "client_credentials.use_refresh_token": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Use refresh tokens for client credentials grant",
              "description": "If this is on, a refresh_token will be created and added to the token response if the client_credentials grant is used. The OAuth 2.0 RFC6749 Section 4.4.3 states that a refresh_token should not be generated when client_credentials grant is used. If this is off then no refresh_token will be generated and the associated user session will be removed."
            },
            "token.response.type.bearer.lower-case": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Use lower-case bearer type in token responses",
              "description": "If this is on, token responses will be set the with the type \"bearer\" in lower-case. By default, the server sets the type as \"Bearer\" as defined by RFC6750."
            },
            "access.token.lifespan": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Access Token Lifespan",
              "description": "Max time before an access token is expired. This value is recommended to be short relative to the SSO timeout."
            },
            "client.session.idle.timeout": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Client Session Idle",
              "description": "Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. The option does not affect the global user SSO session. If not set, it uses the standard SSO Session Idle value."
            },
            "client.session.max.lifespan": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Client Session Max",
              "description": "Max time before a client session is expired. Tokens are invalidated when a client session is expired. The option does not affect the global user SSO session. If not set, it uses the realm Client Session Max or SSO Session Max value."
            },
            "client.offline.session.idle.timeout": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Client Offline Session Idle",
              "description": "Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. The option does not affect the global user SSO session. If not set, it uses the realm Offline Session Idle value."
            },
            "client.offline.session.max.lifespan": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Client Offline Session Max",
              "description": "Max time before a client offline session is expired. If Offline Session Max Limited is enabled at realm level, offline tokens are invalidated when a client offline session is expired. The option does not affect the global user SSO session. If not set, it uses the realm Offline Session Max value."
            },
            "tls.client.certificate.bound.access.tokens": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "OAuth 2.0 Mutual TLS Certificate Bound Access Tokens Enabled",
              "description": "This enables support for OAuth 2.0 Mutual TLS Certificate Bound Access Tokens, which means that keycloak bind an access token and a refresh token with a X.509 certificate of a token requesting client exchanged in mutual TLS between keycloak's Token Endpoint and this client. These tokens can be treated as Holder-of-Key tokens instead of bearer tokens."
            },
            "pkce.code.challenge.method": {
              "type": "string",
              "title": "Proof Key for Code Exchange Code Challenge Method",
              "description": "Choose which code challenge method for PKCE is used. If not specified, keycloak does not applies PKCE to a client unless the client sends an authorization request with appropriate code challenge and code exchange method."
            },
            "require.pushed.authorization.requests": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Pushed authorization request required",
              "description": "Boolean parameter indicating whether the authorization server accepts authorization request data only via the pushed authorization request method."
            }
          }
        },
        "authenticationFlowBindingOverrides": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "properties": {
            "browser": {
              "type": "string",
              "title": "Browser Flow",
              "description": "Select the flow you want to use for browser authentication."
            },
            "direct_grant": {
              "type": "string",
              "title": "Direct Grant Flow",
              "description": "Select the flow you want to use for direct grant authentication."
            }
          },
          "title": "Authentication flow overrides"
        },
        "nodeReRegistrationTimeout": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "registeredNodes": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32",
            "minimum": -2147483648,
            "maximum": 2147483647
          }
        },
        "frontchannelLogout": {
          "type": "boolean",
          "title": "Front channel logout",
          "description": "When true, logout requires a browser redirect to client. When false, server performs a background invocation for logout."
        },
        "protocolMappers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ProtocolMapperRepresentation"
          }
        },
        "clientTemplate": {
          "type": "string"
        },
        "useTemplateConfig": {
          "type": "boolean"
        },
        "useTemplateScope": {
          "type": "boolean"
        },
        "useTemplateMappers": {
          "type": "boolean"
        },
        "defaultClientScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "optionalClientScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authorizationSettings": {
          "$ref": "#/$defs/ResourceServerRepresentation"
        },
        "access": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "origin": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PartialImportRepresentation": {
      "type": "object",
      "properties": {
        "ifResourceExists": {
          "type": "string"
        },
        "policy": {
          "type": "object",
          "description": "Policy"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/UserRepresentation"
          }
        },
        "clients": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientRepresentation"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/GroupRepresentation"
          }
        },
        "identityProviders": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/IdentityProviderRepresentation"
          }
        },
        "identityProviderMappers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/IdentityProviderMapperRepresentation"
          }
        },
        "roles": {
          "$ref": "#/$defs/RolesRepresentation"
        }
      },
      "additionalProperties": false
    },
    "RealmRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "realm": {
          "type": "string",
          "title": "Realm ID"
        },
        "displayName": {
          "type": "string",
          "title": "Display name"
        },
        "displayNameHtml": {
          "type": "string",
          "title": "HTML Display name"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/UserRepresentation"
          }
        },
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ApplicationRepresentation"
          }
        },
        "clients": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientRepresentation"
          }
        },
        "enabled": {
          "type": "boolean"
        },
        "sslRequired": {
          "type": "string",
          "enum": [
            "all",
            "external",
            "none"
          ],
          "title": "Require SSL",
          "description": "Is HTTPS required? 'None' means HTTPS is not required for any client IP address. 'External requests' means localhost and private IP addresses can access without HTTPS. 'All requests' means HTTPS is required for all IP addresses."
        },
        "defaultSignatureAlgorithm": {
          "type": "string",
          "title": "Default Signature Algorithm",
          "description": "Default algorithm used to sign tokens for the realm"
        },
        "revokeRefreshToken": {
          "type": "boolean",
          "title": "Revoke Refresh Token",
          "description": "If enabled a refresh token can only be used up to 'Refresh Token Max Reuse' and is revoked when a different token is used. Otherwise refresh tokens are not revoked when used and can be used multiple times."
        },
        "refreshTokenMaxReuse": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Refresh Token Max Reuse",
          "description": "Maximum number of times a refresh token can be reused. When a different token is used, revocation is immediate."
        },
        "accessTokenLifespan": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Access Token Lifespan",
          "description": "Max time before an access token is expired. This value is recommended to be short relative to the SSO timeout"
        },
        "accessTokenLifespanForImplicitFlow": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Access Token Lifespan For Implicit Flow",
          "description": "Max time before an access token issued during OpenID Connect Implicit Flow is expired. This value is recommended to be shorter than the SSO timeout. There is no possibility to refresh token during implicit flow, that's why there is a separate timeout different to 'Access Token Lifespan'"
        },
        "ssoSessionIdleTimeout": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "SSO Session Idle",
          "description": "Time a session is allowed to be idle before it expires. Tokens and browser sessions are invalidated when a session is expired."
        },
        "ssoSessionMaxLifespan": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "SSO Session Max",
          "description": "Max time before a session is expired. Tokens and browser sessions are invalidated when a session is expired."
        },
        "ssoSessionMaxLifespanRememberMe": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "SSO Session Max Remember Me",
          "description": "Max time before a session is expired when a user has set the remember me option. Tokens and browser sessions are invalidated when a session is expired. If not set it uses the standard SSO Session Max value."
        },
        "ssoSessionIdleTimeoutRememberMe": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "SSO Session Idle Remember Me",
          "description": "Time a remember me session is allowed to be idle before it expires. Tokens and browser sessions are invalidated when a session is expired. If not set it uses the standard SSO Session Idle value."
        },
        "offlineSessionIdleTimeout": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Offline Session Idle",
          "description": "Time an offline session is allowed to be idle before it expires. You need to use offline token to refresh at least once within this period; otherwise offline session will expire."
        },
        "offlineSessionMaxLifespanEnabled": {
          "type": "boolean",
          "title": "Offline Session Max Limited",
          "description": "Enable offline session max"
        },
        "offlineSessionMaxLifespan": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Offline Session Max",
          "description": "Max time before an offline session is expired regardless of activity."
        },
        "clientSessionIdleTimeout": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Client Session Idle",
          "description": "Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. The option does not affect the global user SSO session. If not set, it uses the standard SSO Session Idle value."
        },
        "clientSessionMaxLifespan": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Client Session Max",
          "description": "Max time before a client session is expired. Tokens are invalidated when a session is expired. The option does not affect the global user SSO session. If not set, it uses the standard SSO Session Max value."
        },
        "clientOfflineSessionIdleTimeout": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "clientOfflineSessionMaxLifespan": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "scopeMappings": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopeMappingRepresentation"
          }
        },
        "requiredCredentials": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "passwordPolicy": {
          "type": "string"
        },
        "accessCodeLifespan": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Client Login Timeout",
          "description": "Max time a client has to finish the access token protocol. This should normally be 1 minute."
        },
        "accessCodeLifespanUserAction": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Login action timeout",
          "description": "Max time a user has to complete login related actions like update password or configure totp. This is recommended to be relatively long, such as 5 minutes or more"
        },
        "accessCodeLifespanLogin": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Login timeout",
          "description": "Max time a user has to complete a login. This is recommended to be relatively long, such as 30 minutes or more"
        },
        "actionTokenGeneratedByAdminLifespan": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Default Admin-Initiated Action Lifespan",
          "description": "Maximum time before an action permit sent to a user by administrator is expired. This value is recommended to be long to allow administrators to send e-mails for users that are currently offline. The default timeout can be overridden immediately before issuing the token."
        },
        "actionTokenGeneratedByUserLifespan": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "User-Initiated Action Lifespan",
          "description": "Maximum time before an action permit sent by a user (such as a forgot password e-mail) is expired. This value is recommended to be short because it's expected that the user would react to self-created action quickly."
        },
        "defaultRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultRole": {
          "$ref": "#/$defs/RoleRepresentation"
        },
        "defaultGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "privateKey": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "certificate": {
          "type": "string"
        },
        "codeSecret": {
          "type": "string"
        },
        "passwordCredentialGrantAllowed": {
          "type": "boolean"
        },
        "registrationAllowed": {
          "type": "boolean",
          "title": "User registration",
          "description": "Enable/disable the registration page. A link for registration will show on login page too."
        },
        "registrationEmailAsUsername": {
          "type": "boolean",
          "title": "Email as username",
          "description": "Allow users to set email as username."
        },
        "rememberMe": {
          "type": "boolean",
          "title": "Remember me",
          "description": "Show checkbox on login page to allow user to remain logged in between browser restarts until session expires."
        },
        "verifyEmail": {
          "type": "boolean",
          "title": "Verify email",
          "description": "Require user to verify their email address after initial login or after address changes are submitted."
        },
        "loginWithEmailAllowed": {
          "type": "boolean",
          "title": "Login with email",
          "description": "Allow users to log in with their email address."
        },
        "duplicateEmailsAllowed": {
          "type": "boolean",
          "title": "Duplicate emails",
          "description": "Allow multiple users to have the same email address. Changing this setting will also clear the user's cache. It is recommended to manually update email constraints of existing users in the database after switching off support for duplicate email addresses."
        },
        "resetPasswordAllowed": {
          "type": "boolean",
          "title": "Forgot password",
          "description": "Show a link on login page for user to click when they have forgotten their credentials."
        },
        "editUsernameAllowed": {
          "type": "boolean",
          "title": "Edit username",
          "description": "If enabled, the username field is editable, readonly otherwise."
        },
        "social": {
          "type": "boolean"
        },
        "updateProfileOnInitialSocialLogin": {
          "type": "boolean"
        },
        "browserSecurityHeaders": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "contentSecurityPolicy": {
              "type": "string",
              "title": "Content-Security-Policy",
              "description": "Default value prevents pages from being included by non-origin iframes <1>Learn more</1>"
            },
            "contentSecurityPolicyReportOnly": {
              "type": "string",
              "title": "Content-Security-Policy-Report-Only",
              "description": "For testing Content Security Policies <1>Learn more</1>"
            },
            "strictTransportSecurity": {
              "type": "string",
              "title": "HTTP Strict Transport Security (HSTS)",
              "description": "The Strict-Transport-Security HTTP header tells browsers to always use HTTPS. Once a browser sees this header, it will only visit the site over HTTPS for the time specified (1 year) at max-age, including the subdomains. <1>Learn more</1>"
            },
            "xContentTypeOptions": {
              "type": "string",
              "title": "X-Content-Type-Options",
              "description": "Default value prevents Internet Explorer and Google Chrome from MIME-sniffing a response away from the declared content-type <1>Learn more</1>"
            },
            "xFrameOptions": {
              "type": "string",
              "title": "X-Frame-Options",
              "description": "Default value prevents pages from being included by non-origin iframes <1>Learn more</1>"
            },
            "xRobotsTag": {
              "type": "string",
              "title": "X-Robots-Tag",
              "description": "Prevent pages from appearing in search engines <1>Learn more</1>"
            },
            "xXSSProtection": {
              "type": "string",
              "title": "X-XSS-Protection",
              "description": "This header configures the Cross-site scripting (XSS) filter in your browser. Using the default behaviour, the browser will prevent rendering of the page when a XSS attack is detected. <1>Learn more</1>"
            }
          }
        },
        "socialProviders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "smtpServer": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "auth": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Authentication"
            },
            "envelopeFrom": {
              "type": "string",
              "title": "Envelope from",
              "description": "An email address used for bounces (optional)."
            },
            "from": {
              "type": "string",
              "title": "From"
            },
            "fromDisplayName": {
              "type": "string",
              "title": "From display name",
              "description": "A user-friendly name for the 'From' address (optional)."
            },
            "host": {
              "type": "string",
              "title": "Host"
            },
            "password": {
              "type": "string",
              "title": "Password",
              "description": "SMTP password. This field is able to obtain its value from vault, use ${vault.ID} format."
            },
            "port": {
              "type": "string",
              "title": "Port"
            },
            "replyTo": {
              "type": "string",
              "title": "Reply to"
            },
            "replyToDisplayName": {
              "type": "string",
              "title": "Reply to display name",
              "description": "A user-friendly name for the 'Reply-To' address (optional)."
            },
            "ssl": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Enable SSL"
            },
            "starttls": {
              "type": "string",
              "enum": [
                "true",
                "false",
                ""
              ],
              "title": "Enable StartTLS"
            },
            "user": {
              "type": "string",
              "title": "Username"
            }
          }
        },
        "oauthClients": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/OAuthClientRepresentation"
          }
        },
        "clientScopeMappings": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/ScopeMappingRepresentation"
            }
          }
        },
        "applicationScopeMappings": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/ScopeMappingRepresentation"
            }
          }
        },
        "roles": {
          "$ref": "#/$defs/RolesRepresentation"
        },
        "loginTheme": {
          "type": "string",
          "title": "Login theme",
          "description": "Select theme for login, OTP, grant, registration and forgot password pages."
        },
        "accountTheme": {
          "type": "string",
          "title": "Account theme",
          "description": "Select theme for login, OTP, grant, registration and forgot password pages."
        },
        "adminTheme": {
          "type": "string",
          "title": "Admin UI theme"
        },
        "emailTheme": {
          "type": "string",
          "title": "Email theme",
          "description": "Select theme for emails that are sent by the server."
        },
        "notBefore": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "bruteForceProtected": {
          "type": "boolean"
        },
        "permanentLockout": {
          "type": "boolean",
          "title": "Permanent lockout"
        },
        "maxFailureWaitSeconds": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Max wait",
          "description": "Max time a user will be locked out."
        },
        "minimumQuickLoginWaitSeconds": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Minimum quick login wait",
          "description": "How long to wait after a quick login failure."
        },
        "waitIncrementSeconds": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Wait increment",
          "description": "When failure threshold has been met, how much time should the user be locked out?"
        },
        "quickLoginCheckMilliSeconds": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000,
          "title": "Quick login check milliseconds",
          "description": "If a failure happens concurrently too quickly, lock out the user."
        },
        "maxDeltaTimeSeconds": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Failure reset time",
          "description": "When will failure count be reset?"
        },
        "failureFactor": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Max login failures",
          "description": "Max login failures"
        },
        "eventsEnabled": {
          "type": "boolean",
          "title": "Save events",
          "description": "If enabled, user events are saved to the database, which makes events available to the admin and account management UIs."
        },
        "eventsExpiration": {
          "type": "integer",
          "format": "int64",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000,
          "title": "Expiration",
          "description": "Sets the expiration for events. Expired events are periodically deleted from the database."
        },
        "eventsListeners": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Event listeners",
          "description": "Configure what listeners receive events for the realm."
        },
        "enabledEventTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "adminEventsEnabled": {
          "type": "boolean",
          "title": "Save events",
          "description": "If enabled, admin events are saved to the database, which makes events available to the Admin UI."
        },
        "adminEventsDetailsEnabled": {
          "type": "boolean",
          "title": "Include representation",
          "description": "Include JSON representation for create and update requests."
        },
        "userFederationProviders": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/UserFederationProviderRepresentation"
          }
        },
        "userFederationMappers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/UserFederationMapperRepresentation"
          }
        },
        "identityProviders": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/IdentityProviderRepresentation"
          }
        },
        "protocolMappers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ProtocolMapperRepresentation"
          }
        },
        "internationalizationEnabled": {
          "type": "boolean",
          "title": "Internationalization",
          "description": "If enabled, you can choose which locales you support for this realm and which locale is the default."
        },
        "supportedLocales": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Supported locales"
        },
        "defaultLocale": {
          "type": "string",
          "title": "Default locale"
        },
        "identityProviderMappers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/IdentityProviderMapperRepresentation"
          }
        },
        "authenticationFlows": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/AuthenticationFlowRepresentation"
          }
        },
        "authenticatorConfig": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/AuthenticatorConfigRepresentation"
          }
        },
        "requiredActions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/RequiredActionProviderRepresentation"
          }
        },
        "otpPolicyType": {
          "type": "string",
          "enum": [
            "totp",
            "hotp"
          ],
          "title": "OTP type",
          "description": "totp is Time-Based One Time Password. 'hotp' is a counter base one time password in which the server keeps a counter to hash against."
        },
        "otpPolicyAlgorithm": {
          "type": "string",
          "title": "OTP hash algorithm",
          "description": "What hashing algorithm should be used to generate the OTP."
        },
        "otpPolicyInitialCounter": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Initial counter"
        },
        "otpPolicyDigits": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Number of digits",
          "description": "How many digits should the OTP have?"
        },
        "otpPolicyLookAheadWindow": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Look around window",
          "description": "How far around should the server look just in case the token generator and server are out of time sync or counter sync?"
        },
        "otpPolicyPeriod": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "OTP Token period",
          "description": "How many seconds should an OTP token be valid? Defaults to 30 seconds."
        },
        "otpSupportedApplications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "otpPolicyCodeReusable": {
          "type": "boolean",
          "title": "Reusable token",
          "description": "Possibility to use the same OTP code again after successful authentication."
        },
        "webAuthnPolicyRpEntityName": {
          "type": "string",
          "title": "Relying party entity name",
          "description": "Human-readable server name as WebAuthn Relying Party"
        },
        "webAuthnPolicySignatureAlgorithms": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Signature algorithms",
          "description": "What signature algorithms should be used for Authentication Assertion."
        },
        "webAuthnPolicyRpId": {
          "type": "string",
          "title": "Relying party ID",
          "description": "This is ID as WebAuthn Relying Party. It must be origin's effective domain."
        },
        "webAuthnPolicyAttestationConveyancePreference": {
          "type": "string",
          "enum": [
            "not specified",
            "none",
            "indirect",
            "direct"
          ],
          "title": "Attestation conveyance preference",
          "description": "Communicates to an authenticator the preference of how to generate an attestation statement."
        },
        "webAuthnPolicyAuthenticatorAttachment": {
          "type": "string",
          "enum": [
            "not specified",
            "platform",
            "cross-platform"
          ],
          "title": "Authenticator Attachment",
          "description": "Communicates to an authenticator an acceptable attachment pattern."
        },
        "webAuthnPolicyRequireResidentKey": {
          "type": "string",
          "enum": [
            "not specified",
            "Yes",
            "No"
          ],
          "title": "Require resident key",
          "description": "It tells an authenticator create a public key credential as Resident Key or not."
        },
        "webAuthnPolicyUserVerificationRequirement": {
          "type": "string",
          "enum": [
            "not specified",
            "required",
            "preferred",
            "discouraged"
          ],
          "title": "User verification requirement",
          "description": "Communicates to an authenticator to confirm actually verifying a user."
        },
        "webAuthnPolicyCreateTimeout": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Timeout",
          "description": "Timeout value for creating user's public key credential in seconds. if set to 0, this timeout option is not adapted."
        },
        "webAuthnPolicyAvoidSameAuthenticatorRegister": {
          "type": "boolean",
          "title": "Avoid same authenticator registration",
          "description": "Avoid registering the authenticator that has already been registered."
        },
        "webAuthnPolicyAcceptableAaguids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Acceptable AAGUIDs",
          "description": "The list of AAGUID of which an authenticator can be registered."
        },
        "webAuthnPolicyPasswordlessRpEntityName": {
          "type": "string",
          "title": "Relying party entity name",
          "description": "Human-readable server name as WebAuthn Relying Party"
        },
        "webAuthnPolicyPasswordlessSignatureAlgorithms": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Signature algorithms",
          "description": "What signature algorithms should be used for Authentication Assertion."
        },
        "webAuthnPolicyPasswordlessRpId": {
          "type": "string",
          "title": "Relying party ID",
          "description": "This is ID as WebAuthn Relying Party. It must be origin's effective domain."
        },
        "webAuthnPolicyPasswordlessAttestationConveyancePreference": {
          "type": "string",
          "enum": [
            "not specified",
            "none",
            "indirect",
            "direct"
          ],
          "title": "Attestation conveyance preference",
          "description": "Communicates to an authenticator the preference of how to generate an attestation statement."
        },
        "webAuthnPolicyPasswordlessAuthenticatorAttachment": {
          "type": "string",
          "enum": [
            "not specified",
            "platform",
            "cross-platform"
          ],
          "title": "Authenticator Attachment",
          "description": "Communicates to an authenticator an acceptable attachment pattern."
        },
        "webAuthnPolicyPasswordlessRequireResidentKey": {
          "type": "string",
          "enum": [
            "not specified",
            "Yes",
            "No"
          ],
          "title": "Require resident key",
          "description": "It tells an authenticator create a public key credential as Resident Key or not."
        },
        "webAuthnPolicyPasswordlessUserVerificationRequirement": {
          "type": "string",
          "enum": [
            "not specified",
            "required",
            "preferred",
            "discouraged"
          ],
          "title": "User verification requirement",
          "description": "Communicates to an authenticator to confirm actually verifying a user."
        },
        "webAuthnPolicyPasswordlessCreateTimeout": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "Timeout",
          "description": "Timeout value for creating user's public key credential in seconds. if set to 0, this timeout option is not adapted."
        },
        "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": {
          "type": "boolean",
          "title": "Avoid same authenticator registration",
          "description": "Avoid registering the authenticator that has already been registered."
        },
        "webAuthnPolicyPasswordlessAcceptableAaguids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Acceptable AAGUIDs",
          "description": "The list of AAGUID of which an authenticator can be registered."
        },
        "browserFlow": {
          "type": "string"
        },
        "registrationFlow": {
          "type": "string"
        },
        "directGrantFlow": {
          "type": "string"
        },
        "resetCredentialsFlow": {
          "type": "string"
        },
        "clientAuthenticationFlow": {
          "type": "string"
        },
        "dockerAuthenticationFlow": {
          "type": "string"
        },
        "keycloakVersion": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/GroupRepresentation"
          }
        },
        "clientTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientTemplateRepresentation"
          }
        },
        "clientScopes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientScopeRepresentation"
          }
        },
        "defaultDefaultClientScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultOptionalClientScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "components": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/ComponentExportRepresentation"
            }
          }
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "properties": {
            "adminEventsExpiration": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Expiration",
              "description": "Sets the expiration for events. Expired events are periodically deleted from the database."
            },
            "cibaAuthRequestedUserHint": {
              "type": "string",
              "enum": [
                "login_hint"
              ],
              "title": "Authentication Requested User Hint",
              "description": "The way of identifying the end-user for whom authentication is being requested. Currently only \"login_hint\" is supported."
            },
            "cibaBackchannelTokenDeliveryMode": {
              "type": "string",
              "enum": [
                "ping",
                "poll"
              ],
              "title": "Backchannel Token Delivery Mode",
              "description": "Specifies how the CD (Consumption Device) gets the authentication result and related tokens. This mode will be used by default for the CIBA clients, which do not have other mode explicitly set."
            },
            "cibaExpiresIn": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Expires In",
              "description": "The expiration time of the \"auth_req_id\" in seconds since the authentication request was received."
            },
            "cibaInterval": {
              "type": "string",
              "pattern": "^[0-9]*$",
              "title": "Interval",
              "description": "The minimum amount of time in seconds that the CD (Consumption Device) must wait between polling requests to the token endpoint. If set to 0, the CD must use 5 as the default value according to the CIBA specification."
            },
            "frontendUrl": {
              "type": "string",
              "title": "Frontend URL",
              "description": "Set the frontend URL for the realm. Use in combination with the default hostname provider to override the base URL for frontend requests for a specific realm."
            }
          }
        },
        "federatedUsers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/UserRepresentation"
          }
        },
        "userManagedAccessAllowed": {
          "type": "boolean",
          "title": "User-managed access",
          "description": "If enabled, users are allowed to manage their resources and permissions using the Account Management UI."
        },
        "oauth2DeviceCodeLifespan": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "OAuth 2.0 Device Code Lifespan",
          "description": "Max time before the device code and user code are expired. This value needs to be a long enough lifetime to be usable (allowing the user to retrieve their secondary device, navigate to the verification URI, login, etc.), but should be sufficiently short to limit the usability of a code obtained for phishing."
        },
        "oauth2DevicePollingInterval": {
          "type": "integer",
          "format": "int32",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "title": "OAuth 2.0 Device Polling Interval",
          "description": "The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint."
        },
        "clientPolicies": {
          "$ref": "#/$defs/ClientPoliciesRepresentation"
        },
        "clientProfiles": {
          "$ref": "#/$defs/ClientProfilesRepresentation"
        },
        "bruteForceDetection": {
          "title": "Brute force detection"
        }
      },
      "additionalProperties": false
    },
    "ResourceRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "uris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopeRepresentation"
          }
        },
        "iconUri": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/$defs/ResourceOwnerRepresentation"
        },
        "ownerManagedAccess": {
          "type": "boolean"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "ResourceServerRepresentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "allowRemoteResourceManagement": {
          "type": "boolean"
        },
        "policyEnforcementMode": {
          "enum": [
            "ENFORCING",
            "PERMISSIVE",
            "DISABLED"
          ],
          "type": "string",
          "description": "PolicyEnforcementMode"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ResourceRepresentation"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/PolicyRepresentation"
          }
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ScopeRepresentation"
          }
        },
        "decisionStrategy": {
          "enum": [
            "AFFIRMATIVE",
            "UNANIMOUS",
            "CONSENSUS"
          ],
          "type": "string",
          "description": "DecisionStrategy"
        }
      },
      "additionalProperties": false
    },
    "ScopeRepresentation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "iconUri": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/PolicyRepresentation"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ResourceRepresentation"
          }
        }
      },
      "additionalProperties": false
    },
    "ClientPolicyRepresentation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ClientPolicyConditionRepresentation"
          }
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}
